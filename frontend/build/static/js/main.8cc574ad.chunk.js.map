{"version":3,"sources":["utils/api.ts","logo.svg","services/greeting.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HttpStatus","get","path","acceptedResponseCodes","a","fetch","response","json","responseData","indexOf","status","Error","message","GreetingService","OK","console","log","App","greetingService","useState","greetingMessage","setGreetingMessage","getGreeting","getGreetingMessage","then","data","useEffect","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4JAAcA,E,sECAC,MAA0B,iC,gCDA3BA,O,cAAAA,M,KAIL,IAAMC,EAAG,uCAAG,WAAUC,EAAcC,GAAxB,iBAAAC,EAAA,sEACMC,MAAMH,GADZ,cACXI,EADW,gBAEUA,EAASC,OAFnB,UAEXC,EAFW,QAIuC,IAApDL,EAAsBM,QAAQH,EAASI,QAJ1B,sBAKT,IAAIC,MAAMH,EAAaI,SALd,gCAQVJ,GARU,2CAAH,wDEFGK,E,yIACjB,4BAAAT,EAAA,+EAE+CH,EAAI,yBAAyB,CAACD,EAAWc,KAFxF,cAEcF,EAFd,yBAGeA,EAAQF,QAHvB,uCAKQK,QAAQC,IAAR,yBALR,kBAMe,OANf,yD,oECqCWC,MAnCf,WACE,IAAMC,EAAkB,IAAIL,EAC5B,EAA+CM,mBAAiB,aAAhE,mBAAOC,EAAP,KAAwBC,EAAxB,KAEIC,EAAW,uCAAG,sBAAAlB,EAAA,sDAClBc,EAAgBK,qBACfC,MAAM,SAAAC,GACLJ,EAAmBI,MAHH,2CAAH,qDAWf,OAJAC,qBAAU,WACRJ,MACA,IAGA,qBAAKK,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,+CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,SAMGb,UCnBIc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8cc574ad.chunk.js","sourcesContent":["  export enum HttpStatus {\n      OK = 200\n  }\n  \n  export const get = async <T>(path: string, acceptedResponseCodes: HttpStatus[]): Promise<T> => {\n    const response = await fetch(path);\n    const responseData = await response.json();\n  \n    if (acceptedResponseCodes.indexOf(response.status) === -1) {\n      throw new Error(responseData.message)\n    }\n  \n    return responseData;\n  }\n  \n  export const post = async <T>(path: string, reqBody: any, acceptedResponseCodes: HttpStatus[]): Promise<T> => {\n    const request: RequestInit = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(reqBody),\n    };\n    const response = await fetch(path, request);\n    const responseData = await response.json();\n  \n    if (acceptedResponseCodes.indexOf(response.status) === -1) {\n      throw new Error(responseData.message);\n    }\n  \n    return responseData;\n  }","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {get, HttpStatus} from '../utils/api'\n\nexport default class GreetingService {\n    async getGreetingMessage(): Promise<string> {\n        try{\n            const message: {status:string} = await get('http://localhost:3001/',[HttpStatus.OK]);\n            return message.status \n        }catch(err){\n            console.log(`api err:${err}`)\n            return \"err\"\n        }\n        \n    }\n}","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GreetingService from './services/greeting';\n\nfunction App() {\n  const greetingService = new GreetingService()\n  const [greetingMessage, setGreetingMessage]  = useState<string>(\"Click Me!\")\n  \nconst getGreeting = async () => {\n  greetingService.getGreetingMessage()\n  .then( data => {\n    setGreetingMessage(data)\n  })\n}\n\n  useEffect(() => {\n    getGreeting()\n  },[]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {greetingMessage}\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}